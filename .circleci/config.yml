version: 2.1
orbs:
  node: circleci/node@5
  aws-cli: circleci/aws-cli@4.1.0

parameters:
  project_s3_url:
    type: string
    default: ""
  backend_url:
    type: string
    default: ""

jobs:
  test-node:
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm install jest-junit
      - run:
          name: Run tests
          command: npm run test --ci --runInBand --reporters=default --reporters=jest-junit
      - store_test_results:
          path: ./test-results/

  build-node:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm run build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      - run:
          name: Copy artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      - store_artifacts:
          path: ~/artifacts
          destination: node-build

  deploy-icp:
    docker:
      - image: cimg/node:22.10.0
    steps:
      - aws-cli/setup
      - run:
          name: Install DFX and update PATH
          command: |
            export DFXVM_INIT_YES=true
            curl -fsSL https://internetcomputer.org/install.sh | sh
            echo 'source "$HOME/.local/share/dfx/env"' >> "$BASH_ENV"
      - run:
          name: Initialize dfx.json file
          command: |
            echo '{"canisters":{"aimpact_frontend":{"source":["dist"],"type":"assets","workspace":"aimpact_frontend"}},"defaults":{"build":{"args":"","packtool":""}},"output_env_file":".env","version":1}' > dfx.json
      - run:
          name: Copy AImpact deployment from AWS
          command: aws s3 cp s3://aimpact-deployments/fad38776-9a71-4ffa-8d04-b60242e78708/ dist/ --recursive
      - run:
          name: Instantiate ICP user identity via the private key
          command: |
            export DFXVM_INIT_YES=true
            export DFX_WARNING=-mainnet_plaintext_identity
            export TERM=xterm-256color
            echo "$PRIVATE_KEY" > private_key.pem
            dfx identity import aimpact_deployment --seed-file private_key.pem --storage-mode plaintext
            dfx identity use aimpact_deployment
            echo "Balance: $(dfx cycles balance --network ic --identity aimpact_deployment)"
      - run:
          name: Deploy AImpact on ICP
          command: |
            export DFX_WARNING=-mainnet_plaintext_identity
            export TERM=xterm-256color

            #z7mhb-caaaa-aaaad-aawfa-cai
            #qmbyc-pyaaa-aaaae-qfd4q-cai
            #seica-diaaa-aaaao-qkdda-cai
            #f5jm3-ryaaa-aaaaj-a2dja-cai
            #zmnt2-myaaa-aaaai-q3y4q-cai
            #3auyf-5aaaa-aaaac-az42a-cai
            #3hv6r-qyaaa-aaaac-az42q-cai
            #dzgly-siaaa-aaaab-qb2xq-cai
            #qp73l-2aaaa-aaaam-qdxza-cai
            #qfct6-zqaaa-aaaae-qfd5a-cai
            #w3pp7-lqaaa-aaaal-qspuq-cai
            #v4xrm-yiaaa-aaaaf-qat6q-cai
            #xlim3-2iaaa-aaaah-qqdba-cai
            #xmjkp-xqaaa-aaaah-qqdbq-cai
            dfx identity get-principal

            dfx canister --network ic delete sdjeu-oqaaa-aaaao-qkddq-cai -y

            # dfx start --background
            # echo "Creating canister"
            # dfx canister create aimpact_frontend #--network ic --with-cycles 1000000000000

            # echo "Building canister"
            # dfx build aimpact_frontend #--network ic

            # echo "Deploying canister"
            # dfx canister install -m reinstall aimpact_frontend -y #--network ic -y
      # - run:
      #     name: Send deployment result to AImpact backend
      #     command: |

      #       CANISTER_ID=$(jq -r '.aimpact_frontend.local' .dfx/ic/canister_ids.json)
      #       echo Canister id is $CANISTER_ID
            
      #       curl -X POST \
      #           -H "Content-Type: application/json" \
      #           -d "{
      #                 \"finalUrl\": \"https://$CANISTER_ID.icp0.io\",
      #                 \"projectId\": \"$CANISTER_ID\"
      #               }" \
      #           https://65d178abb1e7.ngrok-free.app/icp-deployment/pipeline-webhook

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Deploy script
          command: '# e.g., ./deploy.sh'
      - run:
          name: Found GitHub actions config
          command: ':'

workflows:
  build-and-test:
    jobs:
      # - test-node
      # - build-node:
      #     requires:
      #       - test-node
      - deploy-icp #:
          # requires:
          #   - test-node
          #   - build-node
      # - deploy:
      #     requires:
      #       - build-node